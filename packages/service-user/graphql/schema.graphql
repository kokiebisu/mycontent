directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  username: String!
  password: String!
  interest: UserInterest!
  yearsOfExperience: Int!
  createdAt: Time
  updatedAt: Time
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/kokiebisu/mycontent/packages/service-user/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  users: [User!]!
}
"""
The builtin Time type
"""
scalar Time
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  username: String
  password: String
  interest: UserInterest
  yearsOfExperience: Int
  updatedAt: Time
}
type User implements Node @key(fields: "id") {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  username: String!
  password: String!
  interest: UserInterest!
  yearsOfExperience: Int!
  createdAt: Time!
  updatedAt: Time!
}
"""
UserInterest is enum for the field interest
"""
enum UserInterest @goModel(model: "github.com/kokiebisu/mycontent/packages/service-user/ent/user.Interest") {
  react
  nodejs
  python
  go
  rust
  docker
  kubernetes
  aws
  gcp
  azure
  terraform
  git
}
"""
Ordering options for User connections
"""
input UserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Users.
  """
  field: UserOrderField!
}
"""
Properties by which User connections can be ordered.
"""
enum UserOrderField {
  FIRST_NAME
  LAST_NAME
  EMAIL
  USERNAME
  PASSWORD
  INTEREST
  YEARS_OF_EXPERIENCE
}
