// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/kokiebisu/mycontent/packages/service-user/ent/user"
)

// CreateUserInput is used for create User object.
// Input was generated by ent.
type CreateUserInput struct {
	FirstName         string        `json:"firstName"`
	LastName          string        `json:"lastName"`
	Email             string        `json:"email"`
	Username          string        `json:"username"`
	Password          string        `json:"password"`
	Interest          user.Interest `json:"interest"`
	YearsOfExperience int           `json:"yearsOfExperience"`
	CreatedAt         *time.Time    `json:"createdAt,omitempty"`
	UpdatedAt         *time.Time    `json:"updatedAt,omitempty"`
}

// Information about pagination in a connection.
// https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
type PageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, are there more items?
	HasPreviousPage bool `json:"hasPreviousPage"`
	// When paginating backwards, the cursor to continue.
	StartCursor *string `json:"startCursor,omitempty"`
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor,omitempty"`
}

type Query struct {
}

// UpdateUserInput is used for update User object.
// Input was generated by ent.
type UpdateUserInput struct {
	FirstName         *string        `json:"firstName,omitempty"`
	LastName          *string        `json:"lastName,omitempty"`
	Email             *string        `json:"email,omitempty"`
	Username          *string        `json:"username,omitempty"`
	Password          *string        `json:"password,omitempty"`
	Interest          *user.Interest `json:"interest,omitempty"`
	YearsOfExperience *int           `json:"yearsOfExperience,omitempty"`
	UpdatedAt         *time.Time     `json:"updatedAt,omitempty"`
}

type User struct {
	ID                string        `json:"id"`
	FirstName         string        `json:"firstName"`
	LastName          string        `json:"lastName"`
	Email             string        `json:"email"`
	Username          string        `json:"username"`
	Password          string        `json:"password"`
	Interest          user.Interest `json:"interest"`
	YearsOfExperience int           `json:"yearsOfExperience"`
	CreatedAt         time.Time     `json:"createdAt"`
	UpdatedAt         time.Time     `json:"updatedAt"`
}

func (User) IsNode() {}

func (User) IsEntity() {}

// Ordering options for User connections
type UserOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order Users.
	Field UserOrderField `json:"field"`
}

// Possible directions in which to order a list of items when provided an `orderBy` argument.
type OrderDirection string

const (
	// Specifies an ascending order for a given `orderBy` argument.
	OrderDirectionAsc OrderDirection = "ASC"
	// Specifies a descending order for a given `orderBy` argument.
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which User connections can be ordered.
type UserOrderField string

const (
	UserOrderFieldFirstName         UserOrderField = "FIRST_NAME"
	UserOrderFieldLastName          UserOrderField = "LAST_NAME"
	UserOrderFieldEmail             UserOrderField = "EMAIL"
	UserOrderFieldUsername          UserOrderField = "USERNAME"
	UserOrderFieldPassword          UserOrderField = "PASSWORD"
	UserOrderFieldInterest          UserOrderField = "INTEREST"
	UserOrderFieldYearsOfExperience UserOrderField = "YEARS_OF_EXPERIENCE"
)

var AllUserOrderField = []UserOrderField{
	UserOrderFieldFirstName,
	UserOrderFieldLastName,
	UserOrderFieldEmail,
	UserOrderFieldUsername,
	UserOrderFieldPassword,
	UserOrderFieldInterest,
	UserOrderFieldYearsOfExperience,
}

func (e UserOrderField) IsValid() bool {
	switch e {
	case UserOrderFieldFirstName, UserOrderFieldLastName, UserOrderFieldEmail, UserOrderFieldUsername, UserOrderFieldPassword, UserOrderFieldInterest, UserOrderFieldYearsOfExperience:
		return true
	}
	return false
}

func (e UserOrderField) String() string {
	return string(e)
}

func (e *UserOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

func (e UserOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
