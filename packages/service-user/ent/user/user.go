// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPersonalityType holds the string denoting the personality_type field in the database.
	FieldPersonalityType = "personality_type"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// Table holds the table name of the user in the database.
	Table = "users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEmail,
	FieldPersonalityType,
	FieldUsername,
	FieldPassword,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
)

// PersonalityType defines the type for the "personality_type" enum field.
type PersonalityType string

// PersonalityType values.
const (
	PersonalityTypeINTJ PersonalityType = "INTJ"
	PersonalityTypeINTP PersonalityType = "INTP"
	PersonalityTypeENTP PersonalityType = "ENTP"
	PersonalityTypeINFJ PersonalityType = "INFJ"
	PersonalityTypeINFP PersonalityType = "INFP"
	PersonalityTypeENTJ PersonalityType = "ENTJ"
	PersonalityTypeISTJ PersonalityType = "ISTJ"
	PersonalityTypeISFJ PersonalityType = "ISFJ"
	PersonalityTypeISTP PersonalityType = "ISTP"
	PersonalityTypeISFP PersonalityType = "ISFP"
	PersonalityTypeESTP PersonalityType = "ESTP"
	PersonalityTypeESFP PersonalityType = "ESFP"
	PersonalityTypeESTJ PersonalityType = "ESTJ"
	PersonalityTypeENFJ PersonalityType = "ENFJ"
	PersonalityTypeENFP PersonalityType = "ENFP"
	PersonalityTypeESFJ PersonalityType = "ESFJ"
)

func (pt PersonalityType) String() string {
	return string(pt)
}

// PersonalityTypeValidator is a validator for the "personality_type" field enum values. It is called by the builders before save.
func PersonalityTypeValidator(pt PersonalityType) error {
	switch pt {
	case PersonalityTypeINTJ, PersonalityTypeINTP, PersonalityTypeENTP, PersonalityTypeINFJ, PersonalityTypeINFP, PersonalityTypeENTJ, PersonalityTypeISTJ, PersonalityTypeISFJ, PersonalityTypeISTP, PersonalityTypeISFP, PersonalityTypeESTP, PersonalityTypeESFP, PersonalityTypeESTJ, PersonalityTypeENFJ, PersonalityTypeENFP, PersonalityTypeESFJ:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for personality_type field: %q", pt)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPersonalityType orders the results by the personality_type field.
func ByPersonalityType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPersonalityType, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}
