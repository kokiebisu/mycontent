// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/kokiebisu/mycontent/packages/service-user/ent/user"
)

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	FirstName         string
	LastName          string
	Email             string
	Username          string
	Password          string
	Interest          user.Interest
	YearsOfExperience int
	CreatedAt         *time.Time
	UpdatedAt         *time.Time
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetFirstName(i.FirstName)
	m.SetLastName(i.LastName)
	m.SetEmail(i.Email)
	m.SetUsername(i.Username)
	m.SetPassword(i.Password)
	m.SetInterest(i.Interest)
	m.SetYearsOfExperience(i.YearsOfExperience)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	FirstName         *string
	LastName          *string
	Email             *string
	Username          *string
	Password          *string
	Interest          *user.Interest
	YearsOfExperience *int
	UpdatedAt         *time.Time
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Username; v != nil {
		m.SetUsername(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.Interest; v != nil {
		m.SetInterest(*v)
	}
	if v := i.YearsOfExperience; v != nil {
		m.SetYearsOfExperience(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
