// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/kokiebisu/mycontent/packages/service-blog/ent/integration"
)

// Integration is the model entity for the Integration schema.
type Integration struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform integration.Platform `json:"platform,omitempty"`
	// APIKey holds the value of the "api_key" field.
	APIKey string `json:"api_key,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Integration) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case integration.FieldPlatform, integration.FieldAPIKey:
			values[i] = new(sql.NullString)
		case integration.FieldCreatedAt, integration.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case integration.FieldID, integration.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Integration fields.
func (i *Integration) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case integration.FieldID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case integration.FieldPlatform:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[j])
			} else if value.Valid {
				i.Platform = integration.Platform(value.String)
			}
		case integration.FieldAPIKey:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_key", values[j])
			} else if value.Valid {
				i.APIKey = value.String
			}
		case integration.FieldUserID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[j])
			} else if value != nil {
				i.UserID = *value
			}
		case integration.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case integration.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Integration.
// This includes values selected through modifiers, order, etc.
func (i *Integration) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// Update returns a builder for updating this Integration.
// Note that you need to call Integration.Unwrap() before calling this method if this Integration
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Integration) Update() *IntegrationUpdateOne {
	return NewIntegrationClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Integration entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Integration) Unwrap() *Integration {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Integration is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Integration) String() string {
	var builder strings.Builder
	builder.WriteString("Integration(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("platform=")
	builder.WriteString(fmt.Sprintf("%v", i.Platform))
	builder.WriteString(", ")
	builder.WriteString("api_key=")
	builder.WriteString(i.APIKey)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", i.UserID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// IsEntity returns true if this struct implements the ent.Entity interface.
func (e *Integration) IsEntity() {}

// Integrations is a parsable slice of Integration.
type Integrations []*Integration
