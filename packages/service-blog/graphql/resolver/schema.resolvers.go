package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"time"

	"github.com/kokiebisu/mycontent/packages/service-blog/ent"
	"github.com/kokiebisu/mycontent/packages/service-blog/graphql/generated"
)

// ID is the resolver for the id field.
func (r *blogResolver) ID(ctx context.Context, obj *ent.Blog) (string, error) {
	return obj.ID.String(), nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *blogResolver) CreatedAt(ctx context.Context, obj *ent.Blog) (string, error) {
	return obj.CreatedAt.Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *blogResolver) UpdatedAt(ctx context.Context, obj *ent.Blog) (string, error) {
	return obj.UpdatedAt.Format(time.RFC3339), nil
}

// DeleteBlog is the resolver for the deleteBlog field.
func (r *mutationResolver) DeleteBlog(ctx context.Context, id string) (string, error) {
	id, err := r.BlogService.Delete(ctx, id)
	if err != nil {
		return "", err
	}
	return id, nil
}

// Blog is the resolver for the blog field.
func (r *queryResolver) Blog(ctx context.Context, id string) (*ent.Blog, error) {
	blog, err := r.BlogService.Get(ctx, id)
	if err != nil {
		return nil, err
	}
	return blog, nil
}

// Blogs is the resolver for the blogs field.
func (r *queryResolver) Blogs(ctx context.Context) ([]*ent.Blog, error) {
	blogs, err := r.BlogService.GetAll(ctx)
	if err != nil {
		return nil, err
	}
	return blogs, nil
}

// BlogsByUserID is the resolver for the blogsByUserId field.
func (r *queryResolver) BlogsByUserID(ctx context.Context, userID string) ([]*ent.Blog, error) {
	blogs, err := r.BlogService.GetAllByUserId(ctx, userID)
	if err != nil {
		return nil, err
	}
	return blogs, nil
}

// Blog returns generated.BlogResolver implementation.
func (r *Resolver) Blog() generated.BlogResolver { return &blogResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type blogResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
