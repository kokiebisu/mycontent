package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"strconv"
)

// CreateContent is the resolver for the createContent field.
func (r *mutationResolver) CreateContent(ctx context.Context, input CreateContentInput) (*Content, error) {
	entity, err := r.Client.Content.Create().SetContentType(input.ContentType).SetTitle(input.Title).SetCreator(input.Creator).SetImageURL(input.ImageURL).Save(ctx)
	if err != nil {
		return nil, err
	}
	return &Content{
		ID:          strconv.Itoa(entity.ID),
		ContentType: entity.ContentType,
		Title:       entity.Title,
		Creator:     entity.Creator,
		ImageURL:    entity.ImageURL,
	}, nil
}

// Content is the resolver for the content field.
func (r *queryResolver) Content(ctx context.Context, id string) (*Content, error) {
	idInt, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	entity, err := r.Client.Content.Get(ctx, idInt)
	if err != nil {
		return nil, err
	}
	return &Content{
		ID:          strconv.Itoa(entity.ID),
		ContentType: entity.ContentType,
		Title:       entity.Title,
		Creator:     entity.Creator,
		ImageURL:    entity.ImageURL,
	}, nil
}

func (r *queryResolver) Contents(ctx context.Context) ([]*Content, error) {
	entities, err := r.Client.Content.Query().All(ctx)
	if err != nil {
		return nil, err
	}
	contents := make([]*Content, len(entities))
	for i, entity := range entities {
		contents[i] = &Content{
			ID:          strconv.Itoa(entity.ID),
			ContentType: entity.ContentType,
			Title:       entity.Title,
			Creator:     entity.Creator,
			ImageURL:    entity.ImageURL,
		}
	}
	return contents, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
