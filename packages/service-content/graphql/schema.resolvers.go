package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"strconv"
	"time"

	"github.com/kokiebisu/mycontent/packages/service-content/ent"
)

// UpdatedAt is the resolver for the updated_at field.
func (r *contentResolver) UpdatedAt(ctx context.Context, obj *ent.Content) (string, error) {
	return obj.UpdatedAt.Format(time.RFC3339), nil
}

// CreateContent is the resolver for the createContent field.
func (r *mutationResolver) CreateContent(ctx context.Context, contentType string, title string, creator string, imageURL string) (*ent.Content, error) {
	return r.Client.Content.Create().SetContentType(contentType).SetTitle(title).SetCreator(creator).SetImageURL(imageURL).Save(ctx)
}

// Content is the resolver for the content field.
func (r *queryResolver) Content(ctx context.Context, id string) (*ent.Content, error) {
	idInt, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	return r.Client.Content.Get(ctx, idInt)
}

// Contents is the resolver for the contents field.
func (r *queryResolver) Contents(ctx context.Context) ([]*ent.Content, error) {
	return r.Client.Content.Query().All(ctx)
}

// Content returns ContentResolver implementation.
func (r *Resolver) Content() ContentResolver { return &contentResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type contentResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
